from typing import Dict, List
from .fixed_version_resolver import FixedVersionResolver
import logging

logger = logging.getLogger(__name__)

class VulnerabilityEnhancer:
    """Enhance vulnerabilities with fixed version information"""
    
    async def enhance_vulnerabilities(self, vulnerabilities: List[Dict]) -> List[Dict]:
        """Enhance list of vulnerabilities with fixed versions"""
        
        if not vulnerabilities:
            return vulnerabilities
        
        logger.info(f"Enhancing {len(vulnerabilities)} vulnerabilities with fixed version data")
        
        enhanced = []
        async with FixedVersionResolver() as resolver:
            for vuln in vulnerabilities:
                try:
                    enhanced_vuln = await resolver.enhance_vulnerability(vuln.copy())
                    enhanced.append(enhanced_vuln)
                except Exception as e:
                    logger.warning(f"Failed to enhance vulnerability {vuln.get('name', 'unknown')}: {e}")
                    enhanced.append(vuln)  # Use original if enhancement fails
        
        # Log results
        original_fixes = len([v for v in vulnerabilities if v.get('fixed_version')])
        enhanced_fixes = len([v for v in enhanced if v.get('fixed_version')])
        new_fixes = enhanced_fixes - original_fixes
        
        logger.info(f"Enhanced vulnerabilities: {original_fixes} â†’ {enhanced_fixes} (+{new_fixes} new fixes)")
        
        return enhanced
